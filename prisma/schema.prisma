// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Role {
  id   String @id
  role String @unique
  User User[]
}

model User {
  id            String          @id
  name          String
  ready         Boolean         @default(false)
  email         String?         @unique
  password      String?
  role          Role            @relation(fields: [roleId], references: [id])
  roleId        String
  QSSSA         Qsssa[]
  UsersOnQSSSAS UsersOnQSSSAS[]
  UsersOnGroups UsersOnGroups[]
  Message       Message[]
  UserGroup     UserGroup[]
}

model Qsssa {
  id             String          @id
  topic          String
  question       String
  sentenceStem   String?
  accessCode     String          @unique
  onlyRecordings Boolean         @default(false)
  img            String?
  teacher        User            @relation(fields: [teacherId], references: [id])
  teacherId      String
  UsersOnQSSSAS  UsersOnQSSSAS[]
  UserGroup      UserGroup[]
}

model UsersOnQSSSAS {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  qsssa   Qsssa  @relation(fields: [qsssaId], references: [id])
  qsssaId String

  @@id([userId, qsssaId])
}

model UserGroup {
  id            String          @id
  name          String
  color         String
  identifier    String?
  active        Boolean         @default(false)
  UsersOnGroups UsersOnGroups[]
  qsssa         Qsssa           @relation(fields: [qsssaId], references: [id])
  qsssaId       String
  Message       Message[]
  selected      User?           @relation(fields: [selectedId], references: [id])
  selectedId    String?
}

model UsersOnGroups {
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  group   UserGroup @relation(fields: [groupId], references: [id])
  groupId String

  @@id([userId, groupId])
}

model Message {
  id      String    @id
  text    String
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  group   UserGroup @relation(fields: [groupId], references: [id])
  groupId String
}
